 == RPC框架在网络通信中更倾向于哪种网络IO模型呢？

1、常见网络IO模型
    * 同步阻塞       最常用
    * 同步非阻塞
    * 异步非阻塞
    * IO多路复用     最常用

 1.1 同步阻塞IO (Blocking IO)
    * 由应用进程发起IO系统调用，进程被阻塞，在内核中等待数据，等到数据后将数据拷贝到用户内存中。IO处理完毕后，解除阻塞状态，运行业务逻辑
    * 系统内核的IO操作分为两部分，等待数据和数据拷贝，在这个过程中，线程都会被阻塞

    等待数据：等待数据是系统内核等待网卡接收到数据，将数据写入内核中
    数据拷贝：系统内核获取到数据后，将数据拷贝到用户进程的空间中

2、应用进程的每一次读写，都会涉及到用户空间和内核空间之间的数据拷贝和cou上线文切换，有没有高效些的方式
    == 零拷贝技术  Zero Copy(零拷贝是指计算机执行IO操作时，cpu不需要将数据从一个存储区域复制到另外一个存储区域，从而减少cpu拷贝和cpu上下文切换的耗时)

3、内核空间和用户空间  (内核：操作系统的内部核心程序)
    * 操作系统会为每一个应用进程分配内存空间，内存空间又分为用户空间和内核空间；内核空间是系统内核访问的区域，用户空间是应用程序访问区域
        - 内核空间： 主要提供进程调度、内存分配、硬件资源链接等功能
        - 用户空间： 提供给应用程序进程的空间
    * 用户态：如果进程运行于用户精简，被称为进程的用户态
    * 内核态：如果进程运行于内核空间，被称为进程的内核态

4、什么是上下文？
    cpu寄存器是cpu内部容量小，速度极快的内存；
    程序计数器是用来记录当前cpu正在执行的指令位置或是下一条即将执行的执行位置；
    -- 二者是cpu在执行任何任务之前必须依赖的环境，被称为上下文

5、什么是上下文切换？
    是指将前一个任务的上下文(cpu寄存器、程序计数器)保存起来，加载新任务的上下文(cpu寄存器、程序计数器)，再跳转到新的程序计数器所指的任务位置，运行新任务

6、虚拟内存
    --定义：虚拟内存是计算机操作系统的一种内存管理技术，使程序任务其拥有一段连续的内存空间(实际上大多数为不连续的)

    优点1、虚拟内存空间可以远大于物理内存空间
    优点2、多个虚拟内存可以可以指向同一个物理地址
        所以，可以将用户空间的虚拟地址和内核空间的虚拟地址映射到同一个物理地址，从而减少IO的数据拷贝次数

