/**
 * https://www.cnblogs.com/q1359720840/p/16271465.html
*/

/** AOF Append Only File */

1、AOF 是写后日志，执行完命令后记录日志
2、三种写回策略 appendfsync
    1): always 每次执行完命令都将日志写到磁盘
    2): everySec 将日志写到内存缓冲区，每秒写到磁盘
    3): no 日志写入内存缓冲区，由操作系统决定何时写回磁盘

    对比：
    1): always 宕机后数据丢失最少，但是对主线程影响最大
    2): everySec 数据丢失居中，性能影响居中
    3): no 丢失数据最多，性能最好

3、问题：AOF文件过大怎么办？
    影响：AOF文件过大会导致日志写入性能受影响；宕机后恢复速度慢执行时间长
    处理：将多个命令进行整合，生成最终的结果命令保存
    问：AOF 重写会阻塞主线程吗？ 不会
        解：主进程fork子进程bgrewriteaof并拷贝一份主线程内存数据进行重写
           重写期间新的写会被记录到AOF日志缓冲区，当重写结束后会将新的写写入AOF日志

4、AOF日志文件长啥样？
    AOP记录的是Redis的每一条命令，是文本形式保存的
    set k v
    // aof日志文件真实存储是下面这样的
    *3 表示命令有三部分
    $3 表示第一部分有三个字节
    set
    $1 表示有1一个字节..
    k
    $1
    v



/** RDB Redis Database*/
1、RDB 文件生成方式
    a : save 在主线程执行，会阻塞
    B : bgsave 主线程fork子线程后由子线程执行
2、问：rdb快照生成期间想的写操作怎么办？
    答：写时复制技术（copy on write）， 在rdb过程中，有新的写请求过来时会生成一份操作数据的副本，主线程在副本的数据上进行修改，rdb快照照常进行
3、混合使用 RDB & AOF
    AOF 负责记录两次RDB 之间的日志，当新的RDB生成后，即可清空AOF，既避免了AOF过大，也避免了RDb过于频繁
    故障恢复时，根据RDB 和 AOF共同来恢复数据，既减少了数据损失，也提高了恢复速度

应用场景：
    a : 数据不可丢失时，RDB 和 AOF混合使用
    b : 允许分钟级别丢失的，可以只用RDB
    c : 如果只用AOF， 使用everySec 可以平衡数据丢失和性能