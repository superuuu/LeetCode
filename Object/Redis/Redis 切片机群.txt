场景：有大量数据需要保存在Redis中，有哪些问题？ 有哪些方案？
    数据量过大，会导致RDB耗时过高，阻塞Redis主线程


大数据量保存的方案
1、纵向扩展
    升级实例配置，增加内存、磁盘，使用更好的cpu

    == 缺点：数据量大后，Rdb耗时长，阻塞主线程(如果不需要持久化的数据，这么搞还行)；成本，硬件受限，10G扩充到100G还行，扩充到1T呢？
    == 优点：操作简单

2、横向扩展
    * 引入Redis切片集群   Redis Cluster方案

    a: 通过Hash Slot(哈希槽) 来处理数据和实例的映射关系
    b: 在创建cluster集群时，会将16384个哈希槽平分到各个实例上(当然也可以手动指定，如果手动分配，需要将16384个哈希槽全部分配完成)
    c: 一个切片集群，有16384个哈希槽，redis的key进行CRC16计算后得到16比特的值，用这个值对16384取模得到0-16383中的一个数，即为哈希槽的编号
    d: Redis实例会将哈希槽的信息发送给客户端，客户端缓存在本地，在请求是会在本地进行计算从而知道数据在哪个实例


    == 哈希槽重新分配的场景
    * 有新的实例加入或删除的场景，需要重新分配哈希槽
    * 负载均衡，redis需要把实例上的哈希槽重新分布(如部分热点key集中在某几个槽，导致压力分布不均)

    == 哈希槽重新分配后 实例和客户端如何感知
    * 实例间会进行消息的通信，可以感知到哈希槽的变化
    * 重定向机制：客户端向实例A发送数据请求，但是数据不在实例A上，实例A会返回正确的实力地址给客户端