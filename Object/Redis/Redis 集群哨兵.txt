== 主库挂了，需要解决的三个问题
影响：写操作不能进行；读操作可以；从库无法同步数据；     解决：哨兵机制
    1、主库是真的挂了吗 ？
    2、选谁作为新的主库 ？
    3、如何把新的主库信息同步给从库和客户端 ？

哨兵
    哨兵其实就是一个redis线程，负责监控、选主、通知

1、监控(监控主库，判断主库是否客观下线)
    哨兵在运行时会周期性的给主从库发送ping命令，如果主从库没有在规定时间内响应哨兵的ping命令，哨兵就标记该库为下线状态；
2、选主(主库客观下线后，选举新主库)
    在1中主库挂掉后，哨兵会按照一定的规则在从库实例中选择一个作为新的主库
3、通知(选出新主后同步从库和客户端)
    选主后，哨兵会将新主的链接方式发送给其他从库，从库执行replicaof命令和主库建立连接并进行数据复制；同时通知客户端将请求操作发到新主库上

A: 如何判断主库下线(GG)
    主观下线：哨兵和发送给主库或是从库的ping如果超时未收到响应，哨兵就会将该库标记为主观下线
    客观下线：从库下线的影响可控，如果哨兵发现主库主观下线，不能直接进行选主切换，而是哨兵集群大部分认为主库下线，此时才会认为主库客观下线，启动选主切换流程
        == n个哨兵实例，当有n/2+1 个哨兵认为主库下线时，主库标记为客观下线，避免单个哨兵的误判

    哨兵机制：通常会采用多实例组成的集群模式进行部署，被称为哨兵集群

B：如何选主
    a：判断从库是否正常运行
    b：判断从库与主库连接是否稳定，网络状况是否良好
    c：打分
        第一轮：从库优先级，slave-priority配置，比如根据实例配置，内存大小给配置优先级，优先级越高分数越大，如果分数相同进入第二轮
        第二轮：和旧主库同步成都最接近的，分数最高   主库的master_repl_offset 和从库的slave_repl_offset ， 如果分数相同进入第三轮
        第三轮：每个实例都会有一个ID编号，ID编号小的得分高，新主选举完成

4、哨兵集群的组成(基于pub/sub机制，发布订阅机制)
    * 哨兵只要和主库建立了连接，就可以在主库上进行发布和订阅消息，将自己的ip、port发布到主库上，并从主库订阅其他哨兵信息
    * 当哨兵都和主库建立连接后，哨兵之间就可以知道彼此的地址和端口建立连接

    == 哨兵是如何与从库建立连接的呢？(主库切换后哨兵要同步新主库信息给从库)
    哨兵和主库建立连接后，会像主库发送info命令，主库返回从库slave的列表，哨兵和从库建立连接

    == 哨兵是如何和客户端连接的呢？(主库切换后哨兵如何通知客户端？)
    客户端通过哨兵配置文件获取到哨兵的ip、port，和哨兵建立链接，从哨兵订阅消息
        - 不同频道消息对应不同事件
        a:PSUBSCRIBE  *      => 订阅所有事件
        b: switch-master <master name> <oldip> <oldport> <newip> <newport> 该消息表示主库已发生切换


实战问题
1、哨兵检测主库超时的时间是可以配置的，down-after-millisecond, 时间越短哨兵越敏感，因为网络拥塞问题或是主库压力大导致的误判可能性相对较高；
   但是在主库真正发生故障时，故障影响更小；参数配置过大的话误判几率小但是出现故障执行自动切换的耗时会变高

2、哨兵集群中有实例挂了，会影响判断和选主吗？(分布式系统问题，节点故障时分布式系统还能不能正常提供服务【拜占庭将军问题】)
    简单结论：有实例挂了，只要大部分实例正常，就能对外提供服务

3、哨兵集群判断出主库挂掉后，由谁来执行选主和切换呢？
    == 分布式系统中的共识问题，多个节点就一个问题达成共识 (共识算法 Raft等)
    哨兵节点会随机设置一个超时时间，在超时后，哨兵节点会像其他节点发起请求为自己投票，票数最多者为哨兵领导者，如果一轮投票无结果就继续进行，直到选举结束

坑
不同哨兵配置的down-after-milliseconds参数一定要一致，否则主库异常可能不及时或不进行主库切换