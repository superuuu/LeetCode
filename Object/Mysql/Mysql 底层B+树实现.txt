1、B+树简介
    一个M阶的B+树每个结点最多有m个子节点；
    相邻叶子结点是通过指针进行连接的，且是按关键字大小有序排列的

2、B+树存放数据的计算
    * 假设一行数据大小是1k，Innodb存储引擎最小存储单元是页，一页大小是16k，一个叶子节点可以保存16行数据
    * 根节点存放指针，假设主键ID为bigint占用8字节，指针占用6字节，一共14字节，16k/14b = 16*1024/14 = 1170
    * 1170 * 16 = 18720 ，一个高度为2的B+树可存储18720数据，一个高度为3的B+树就可以存储18720*1170 = 21902400
    * B+树高度一般为3-4层，已经满足千万级数据存储的需求了

3、为什么使用使用B+树索引，而不是hash、B-树、红黑树？
    * Hash索引适合等值查询，但不适合区间范围查询，采用一定的hash算法将key换算成hash值，存入哈希槽，对于多个keyhash到同一位置的，采用链表解决(哈希冲突)
    * 一般二叉树在极端情况下可能会退化成一个链表(线性结构)，相当于全表扫描
    * B-树叶子结点和内部节点都存放数据，相同数据量B+树高度更低，查询时磁盘查找次数会更少
    * 红黑树是自平衡二叉树，相较一般二叉树性能有提升，但是假如存放一百万数据 pow(2, n)-1 = 100w, n 约等于20,意味着最坏的查询需要进行20次的磁盘IO

    * B+树的数据都在叶子节点，非叶子节点就能存储更多的key和指针，指针越多，分叉越多，相同高度的树就能保存更多的数据量
        B+树叶子节点之间通过指针形成双向链表
        叶子节点使用双指针，方便进行范围查询

    * B+树的劣势：由于一个key可能在叶子节点和非叶子节点出现，会浪费空间，但是在性能提升方面可以忽略此部分空间的浪费

4、定义
    * 二叉查找树：又叫做二叉排序树，每个节点最多有两个子节点，且满足左子节点小于根节点小于右子节点
    * 二叉平衡树：所有节点的左右子树高度差不能超过1， 树调整旋转耗时高
    * 红黑树：确保大致平衡，跟节点到叶子节点的最长路径不超过最短路径的两倍即可，因为平衡性得不到保障，所以查询性能下降，但引入颜色使得插入删除数据成本降低，只需要O(1)
    * B树：非叶子节点可以有多个子节点，在节点数相同的情况下，B树的高度远远小于二叉树，使得磁盘IO次数大大减少
    * B树的一个概念：阶数n
        每个节点最多包含n个子节点
        如果根节点包含子节点，最少两个
        非叶子节点的中间节点包含最少n/2个子节点
        拥有k个子节点的非叶子节点包含k-1条记录
        所有叶子结点在同一层
    *B树除了树高更矮的优点，还利用了访问局部性原理，即当一个key被访问其附近的数据也很有可能被访问，当访问某个数据时，数据库会将整个节点的数据加载进缓存中，更容易命中缓存

    - B树的节点都存储数据，B+树只有叶子节点存储数据，非叶子节点存储键(这里说的数据innodb举例可能是行的全部数据，聚簇索引，也可能是主键值，普通索引)
    - B树中每条记录只会出现一次，B+树可能出现多次
    - B树中的非叶子结点保存的记录比子节点少一个，B+树非叶子结点保存的记录数则和子节点相同
    - B+树叶子节点之间通过双向链表连接

5、对3的总结 B+树的优势
    1): 更少的IO次数，B+只有叶子结点存放数据，非叶子结点只存放键和指针，使得相同高度的B+树存放更多的数据
    2): 因为B+树叶子节点是通过双向链表链接的，更适合范围查询，遍历即可