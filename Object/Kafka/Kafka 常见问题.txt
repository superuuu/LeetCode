/** https://blog.csdn.net/wanghaiping1993/article/details/125346010 */

/**

1、kafka的消费者是pull(拉)还是push(推)模式，这种模式有什么好处？
    * consumer的pull模式

    * 优点：下游可以根据自身消费水平去拉取消息；而不是push模式下broker进行消息推送，下游消费能力过低可能积压，消费速率快推送慢可能导致性能浪费
    * 缺点：当broker无消息时，consumer也会一直轮询去拉取消息  可以设置timeout参数

2、kafka维护消息状态的跟踪方法

3、zookeeper对于kafka的作用是什么?
    zookeeper 用于集群中节点间的通信，leader的检测，节点的状态判断、偏移量提交等工作

4、kafka判断一个节点还活着的有那两个条件？
    * 节点必须维护和Zookeeper链接，zookeeper通过心跳机制检测节点连接是否正常
    * 如果节点是个follower，他必须能及时的同步leader的写操作，延时不能太久

5、讲一讲 kafka 的 ack 的三种机制(Kafka 如何保证数据不丢失？ Ack机制)
    1)生产者
        a:异步发送改为同步发可以实时知道消息发送结果，缺点是系统吞吐量会降低
        b:添加异步回调函数来监听发送结果，针对失败的采取对应的措施
        c:producer本身提供了retries机制，因为网络或是broker等问题发送失败会进行重试
    2)broker
         => kafka的ack机制有三个值，1(all)，,0 ，-1
        * 1(默认) Producer收到一个分区leader写入成功的消息就认为消息发送成，如果此时leader所在broker宕机，消息丢失
        * 0 Producer只发送一次消息，不管成功与失败
        * -1 Producer收到所有分区写入成功的消息才认为消息发送成功

        1、异步发送改为同步发送，可以实时知道结果但是会影响系统吞吐量
        2、生产者Producer发送消息调用producer.send(msg)时可以添加回调函数, producer.send(msg, callbackFunc), 如果消息发送失败就可以针对性的进行处理

        Broker本身消息持久化，是异步的， 才用的是异步批量刷到磁盘，具体写盘时机是由操作系统决定的
    3)消费者



6、kafka 分布式（不是单机）的情况下，如何保证消息的顺序消费?
    * kafka发送消息时可以指定Topic、Key和Partition，Partition是由一个write ahead log(预写日志wal)组织的，将一系列的消息发送到同一个partition中，
      kafka保证一个partition是有一个消费者消费的，所以可以保证顺序性消费
    * 也可以指定Key，同一个Key会写入到同一个Partition中，也可保证顺序消费
    == 顺丰同城 通过指定消息Key来保证消息的顺序消费

6.1、插入问题：follower和leader出现故障，怎么保证数据的一致性？
    * follower故障 当一个follower出现故障时，会被临时踢出ISR集合，待follower恢复后，follower会读取本地磁盘记录的HW，并将Log文件大于HW部分的日志删掉，
      从HW开始向leader同步数据，当follower的leo大于等于当前partition的HW后，即follower追上leader之后便可再重新加入ISR集合
    * leader故障 leader故障之后会从ISR集合中选出新的leader，为了保持数据一致，各follower会将高于Hw部分删掉后再从leader同步

7、kafka 如何不消费重复数据？比如扣款，我们不能重复的扣。
    * Consumer采用Pull模式从Broker中读取数据
    * Consumer会维护一个Offset，offset是实时记录着当前消费的位置；消费者能见到最大的offset是HW，也是ISR集合中最小的LEO，维护好offset即可保证不重复消费
    * offset的维护方式
        1) 自动提交
        2) 手动提交
            a:commitSync  同步提交 阻塞当前线程，一直到提交成功(不可控因素下也可能失败)，会自动重试
            b:commitASync 异步提交，无重试，可能提交失败

    * 业务层面控制幂等性

8、讲一下kafka集群的组成？
    kafka cluster 包含多个broker
    producer
    consumer
    zookeeper 主要用于kafka集群中新增kafka或是失效的通知，broker的故障发现、broker，partition等元数据的保存、partition leader选举、负载均衡等

9、kafka是什么？
    * 高吞吐量，分布式、发布/订阅式的消息系统

10、partition的数据文件（offffset，MessageSize，data）
    partition中的每条消息包含 offset、messageSize、data
    * offset标识消息在partition中的偏移量
    * messageSize是消息的大小
    * data 消息的具体内容

11、kafka如何实现数据的高效读取？（顺序读写、分段命令、二分查找）

12、 Kafka 消费者端的 Rebalance 操作什么时候发生？（Rebalance：kafka的消费者数量或是分区数量发生变化时，需要重新分配消费者和分区的消费关系）
    * 消费者组中有新的消费者加入的时候
    * 消费者组中有消费者退出的时候(宕机)
    * Topic的partition数量发生变化时
    * 消费者主动取消订阅

    // rebalance过程
    * 找到组协调器 消费者提交的offset提交到哪个分区，那么这个分区的leader所在的broker就是这个消费者组的组协调器(group coordinator)
    * 所有成员向组协调器(group coordinator)申请入组，一旦所有成员都发送了请求，组协调器会从中选择一个leader(通常是第一个加入的consumer)，并将消息和订阅信息都发送给leader
    * leader开始分配哪些consumer消费哪些topic下的partition，分配完成后将信息发送给组协调器
    * 组协调器将分配信息发布给各个consumer，这样消费者就知道自己该处理那部分信息

    // rebalance分区分配策略
    * range(), 分区数/消费者数=n  ，分区数%消费者数=m，前m个消费者每个消费者分配n+1个partition分区
    * round-robin(), 轮询分配，第123个消费者分别是0369、147、258
    * sticky(粘性)：分区分配尽可能均匀；分配尽可能和上一次相同； 前两种冲突时，第一点优先级最高

13、Kafka 中的ISR(InSyncRepli)、OSR(OutSyncRepli)、AR(AllRepli)代表什么？
     * ISR 和leader同步相差10ms以内的follower合集
     * OSR 和leader同步相差10ms以上的follower合集
     * AR 全部follower
14、Kafka 中的HW、LEO等分别代表什么？
    * HW 高水位，消费只能拉取到这个offset之前的数据
    * LEO 标识当前日志文件中下一条写入数据的offset，大小等于当前日志最后一条的offset+1

15、Kafka的那些设计让它有如此高的性能?
    * 页缓存技术     kafka数据写入磁盘的时候是将数据写入os cache缓存，也就是写入内存中，由操作系统决定什么时候输入磁盘中
    * 磁盘顺序写     仅仅将数据追加到文件末尾，不是在文件的随机位置修改数据
    * 零拷贝        不需要将数据从os cache拷贝到应用缓存，再从应用缓存拷贝到socket缓存
    * 分区分段+索引  kafka的message是按topic分类存储的，topic中的数据又是按照partition在不同broker上分别存储的，每个partition对应的是一个文件夹，partition又是按照segment分段存储的
                   kafka为分段后的数据文件建立了索引文件，提升了数据的读取效率

16、Kafka为什么不支持读写分离？
    副本之间需要进行数据同步，读写分离可能导致数据不一致的情况出现

17、分区Leader选举策略有几种？
    如果IRS中有一个follower存活可保证数据不丢失，如果全部挂了...
        * 等待ISR中第一个活过来的follower，选为leader(可能等待时间相对较长)
        * 等待第一个活过来的节点作为leader

        * 大体思路：在AR中挑选在ISR中的第一个follower作为leader

18、请简述下你在哪些场景下会选择 Kafka？
    * 日志收集
    * 用于生产者消费者解耦，异步

19、请谈一谈 Kafka 数据一致性原理
    * 数据一致性也就是新老leader变更怎么保证consumer读取到一样的数据？
    * 只有HW之前的数据才支持consumer读取
    *

20、Kafka 缺点？
    * 无法实现全局消息有序，仅支持单一分区内消息有序
    * 是批量发送，数据并非真正的实时
*/