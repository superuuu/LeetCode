1、如何确保消息正确的发送到RabbitMq？ 如何确保消息接收方消费了消息？(如何确保消息不丢失？)

1) 生产者层面保障
    * 开启事物
    * 生产者开启事物进行消息发送，如果消息没有被rabbitMq正常接收就会收到报错信息，事物回滚后再处理
    * 如果rabbitMq成功收到消息，事物提交

    * 弊端：rabbitMq事物机制是同步的，开启事务后就会阻塞，影响吞吐量


    /** =========================== */

    * 发送者确认模式，将信道设置为confirm模式(发送者确认模式)，所有经过信道发送的消息都会默认生成一个id，在消息投放至队列
      或是写入磁盘(持久化)后，信道会给生产者客户端发送带有唯一ID的确认(ack)；
    * 如果RabbitMq内部发生错误导致消息丢失，信道会发送nack(未确认)给生产者。
    * 发送者确认模式是异步的，在生产者未收到ack时仍可以继续发送消息，当ack到达生产者客户端时会触发客户端回调函数去进行相应处理


2)rabbitMq
    * 消息持久化
    * 镜像集群

3)消费者
    * 消费者接收到消息，确认后，RabbitMq才会将消息从队列中删除
    * 如果消费者接收到消息还未确认就断开了链接，rabbitMq会将消息分发给下一个订阅的消费者(存在重复消费的可能，需要下游幂等)
    * 如果消费者接收到消息但是未确认，连接也未断开，rebbitMq会认为消费者繁忙，便不再给消费者分发消息



2、如何避免消息重复投递或重复消费？
    * RabbitMq在内部针对每条生产者生产的消息会生成一个inner-msg-id，作为去重的依据，避免消息重复进入队列
    * 在消息消费时，要求消息体中必须有一个bizid作为去重依据，避免消息被重复消费(统一业务场景全局唯一的标识，如订单Id等)

3、消息基于什么进行传输？
    * 由于TCP链接的创建和销毁成本较高会造成性能瓶颈，rabbitMq采用信道进行数据传输；信道是在每个真是TCP连接中创建的虚拟连接，每个TCP链接中的信道数无上限


5、rabbitMq集群
    1)镜像队列集群模式
        * 集群中一般会包含一个主节点Master和多个从节点Slave，当主节点因为某些原因宕机时，会根据从节点加入的数据将最早加入的从节点变为新主节点
        * 镜像队列下，所有消息都是发送给Master节点的再由master将命令的执行结果广播给slave

    2) 缺点
        a: 消息需要同步到所有机器上，网络带宽压力较大
        b: 非分布式，无扩展性

6、rabbitMq优缺点
    1)优点
        * 服务间解耦
        * 流量削峰
        * 服务间异步通信提高性能

    2)缺点
        * 系统可用性降低，一旦mQ挂掉，系统就挂了
        * 系统复杂度升高，需要保证顺序消费、避免冲消费等等问题

7、消息传输模式有哪些？
    1) 简单模式
        一个生产者一个队列一个消费者，生产者生产消息投递到队列，消费者进行消费
    2) 工作模式
        一个生产者一个队列两个消费者，当其中一个消费者在消费消息的时候另一个消费者去获取并消费消息
    3) 发布订阅模式
        是指多个消费者同时消费消息的模式，生产者将消息投递到交换机，交换机将消息推给与之绑定的多个队列，绑定在不同队列上的消费者进行消费
    4) 路由模式
        路由模式是指根据路由键将消息选择性的发送给消费者

8、消息如何保证顺序消费？
    * 根据业务场景进行划分，保证单个场景的消息在同一队列中，由同一消费者进行消费

9、rabbitMq持久化机制的理解
    1) 队列持久化 queue
        定义队列时durable参数设置为true，这个持久化的意义是啥？
    2) 消息持久化 message
        重启后保证消息还存在，需要设置消息持久化
    3) 交换机(exchange)持久化
        如果不设置交换机持久化，那么当broker服务器重启后，生产者producer就无法正常发送消息

    问：所有消息都可以持久化吗？
    答：不，持久化是将信息写入磁盘，写磁盘效率低，如果所有消息都写入磁盘的话不仅性能地下反而会带来磁盘的额外开销
    ** 但是啥样的数据更适合持久化呢？

