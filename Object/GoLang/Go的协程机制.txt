/** Golang协程的核心机制是GMP */
    * G 代表goroutine协程 代码中go关键词创建的对象
    * M 代表 work thread 工作线程
    * P 代表处理器，用来管理和执行go routine

/** 理解不到位，可能存在错误 */

/** 调度器 */
1、调度器的功能是把可运行的GoRoutine协程(G)分配到可以工作的线程上(M)
2、调度器的组成包括处理器(P)、处理器维护的本地的Goroutine协程队列(G)、全局Goroutine协程队列;
3、调度器策略
    * GMP的调度流程从go func()开始创建一个goroutine协程，G协程会被优先放在P处理器维护的本地队列中，如果本地队列已满，会放到全局队列中
    * work stealing 机制：线程(M)在获取处理器(P)运行协程(G)时会先从处理器P本地队列获取，如果为空会从别的处理器P本地偷一半的数据放到自己本地的P队列中
    * hand off 机制：当线程M拥塞(因为协程G系统调度)时，线程M会释放绑定的处理器P，从而让其他空闲的M线程去执行
4、抢占式调度
    * 基于协作的抢占式调度
        * go语言在运行时发现goroutine运行超过10ms就会发出抢占请求stackpreempt
        * 当有函数调用时，会检查stackgurd0字段，如果已经变成stackpreempt，就会发生抢占让出当前线程
    * 基于信号的抢占调度(也称为异步抢占)
        *

5、GMP的数据量
    * G的数量无限制，受内存影响，一台普通机器可即可开启数十万个G
    * P启动时默认是cpu核心数量
    * M最大限制为1w


/** 进程、线程、协程 的区别 */
    * 进程，资源分配的最小单位，每个进程都有独立的内存空间，不同进程间通过进程间通信方式来通信
        1) 进程间通信方式：管道，通常指无名管道
        2) 进程间通信方式：FIFO，即命名管道，可以在无关的进程间进行通信
        3) 消息队列
        4) 信号量
        5) 共享内存(两个或是多个进程共享同一块内存)
    * 线程，程序执行的最小单位，是cpu调度的基本单位，从属于进程，同一进程内的线程数据共享
    * 协程，轻量级的线程，不受操作系统调度，协程的调度器由应用程序提供，协程调度器按照策略将协程调度到线程中执行
