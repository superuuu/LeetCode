1、标记-清除算法(Go历史版本采用)
    1、暂停程序，找到不可达的对象(STW stop the world)
    2、根据标记，清除不可达的对象
    3、恢复程序运行
2、三色标记法
    1) 第一步：所有对象被创建时默认的颜色都是白色，放入白色集合中
    2) 第二步：每次GC开始时，遍历所有对象，将遍历到的对象从白色集合中取出放入灰色集合中
    3) 第三步：遍历灰色对象集合，将灰色对象引用的对象从白色集合放入灰色集合中，之后将此灰色对象放入黑色集合中
    4) 第四步：重复第三步，直到灰色几何中没有任何对象
    5) 第五步：回收所有白色标记的对象，即回收垃圾，GC

3、没有STW的三色标记法问题
    没有STW的三色标记法还是会存在问题，如果不暂停程序，在标记过程中就可能因为程序逻辑改变对象的引用关系，影响标记的准确性
    Demo:
    假设有 对象A(黑色)  对象B(灰色)  对象C(白色)  对象D(黑色)
    关系有：对象A -> 引用 -> 对象B -> 引用 -> 对象C

    程序 将对象D 创建指针指向 对象C， 同时对象B 删除了指向 对象C的指针(对象B接触了对对象C的引用，此时对象C白色，挂在对象D黑色下面)
    * 正常GC逻辑，对象B、C会被赋为黑色，但是当前对象C挂在对象D下，对象D为黑色不会再被扫描，所以对象C就一直是白色直到被回收，实际是不该被回收的

4、如何再没有STW下保证GC的高效
    方案一：强-弱三色不变式
        a: 强三色不变式： 强制限制黑色对象引用白色对象
        b: 弱三色不变式：黑色对象引用的白色对象处于灰色保护状态；或是该白色对象存在链路中有灰色对象引用
    方案二：插入屏障

https://zhuanlan.zhihu.com/p/334999060 大神的文章，属实厉害